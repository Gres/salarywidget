{"version":3,"file":"static/js/924.753b2c9c.chunk.js","mappings":"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","sources":["api/http-client.js","api/apiMethods.js","views/Dashboard/actions/actionTypes.js","views/Dashboard/actions/index.js","views/Dashboard/saga.js","views/Dashboard/reducer.js","views/Dashboard/index.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.teleport.org/api'\n\nconst HttpClient = axios.create({\n    baseURL: BASE_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    crossDomain: true,\n    responseType: 'JSON'\n});\n\n\nexport default HttpClient;\n","import HttpClient from './http-client';\n\nclass APIMethods {\n    get(resource, params = {}) {\n        return HttpClient.get(resource, {params});\n    }\n\n    create(resource, {data, ...params} = {}) {\n        return HttpClient.post(resource, data, {params});\n    }\n\n    update(resource, {data, ...params}) {\n        return HttpClient.put(resource, data, {params});\n    }\n\n    delete(resource, params) {\n        return HttpClient.delete(resource, {params});\n    }\n}\n\nexport default new APIMethods();\n","export const LOAD_ITEMS = 'LOAD_ITEMS_CITY';\nexport const SET_ITEMS = 'SET_ITEMS_CITY';\nexport const SET_CITIES_LOADING = 'SET_CITIES_LOADING';\n","import {LOAD_ITEMS, SET_CITIES_LOADING, SET_ITEMS} from './actionTypes';\n\nexport const loadItems = id => ({\n    type: LOAD_ITEMS,\n    payload: id\n});\n\nexport const setItems = data => ({\n    type: SET_ITEMS,\n    payload: data\n});\n\n\nexport const setCitiesLoading = status => ({\n    type: SET_CITIES_LOADING,\n    payload: status\n});\n","import {call, put, takeLatest} from 'redux-saga/effects';\nimport apiMethods from '../../api/apiMethods';\nimport {LOAD_ITEMS} from './actions/actionTypes';\nimport {setCitiesLoading, setItems} from './actions';\n\nfunction* loadAllCities(props = {}, {payload: id}) {\n    try {\n        const {data: {_links, count}} = yield call(apiMethods.get, `urban_areas/`);\n        yield put(setItems({list: _links, count}));\n    } catch (error) {\n\n    } finally {\n        yield put(setCitiesLoading(false));\n    }\n}\n\nexport default function* citySagaWatcher(props) {\n\n    yield takeLatest(LOAD_ITEMS, loadAllCities, props);\n}\n","import {LOAD_ITEMS, SET_CITIES_LOADING, SET_ITEMS} from './actions/actionTypes';\n\nconst initialState = {\n    fetching: true,\n    list: {},\n    count: 0\n};\n\nexport default (state = initialState, {type, payload}) => {\n    switch (type) {\n        case LOAD_ITEMS:\n            return {\n                ...state,\n                fetching: true\n            };\n        case SET_ITEMS:\n            return {\n                ...state,\n                fetching: false,\n                ...payload\n            };\n        case SET_CITIES_LOADING:\n            return {\n                ...state,\n                fetching: payload\n            };\n        default:\n            return state;\n    }\n};\n","import React, {useEffect} from 'react';\nimport {connect, useSelector} from 'react-redux';\nimport {injectReducer, injectSaga} from 'redux-sagas-injector';\nimport {loadItems} from './actions';\nimport citiesSaga from './saga';\nimport {useHistory} from 'react-router-dom';\nimport cities from './reducer';\nimport LoadingScreen from \"../../components/loadingManager/LoadingScreen\";\nimport {List, ListItem} from \"@material-ui/core\";\n\nconst Dashboard = ({onLoad, onFormSave, onPersonDelete}) => {\n    injectReducer('cities', cities);\n    injectSaga(`citiesSaga`, citiesSaga);\n    const history = useHistory();\n    useEffect(() => {\n        onLoad();\n    }, [onLoad]);\n    const fetching = useSelector(state => state.cities.fetching);\n    const items = useSelector(state => state.cities.list['ua:item']);\n    const onCityClick = slug => () => history.push(`city/${slug}`);\n    return (<>\n            {fetching && <LoadingScreen/>}\n            <List\n                style={{width: '100%', columnCount: 3, bgcolor: 'background.paper'}}>\n                {items?.map(\n                    (item) => {\n                        return (\n                            <ListItem key={item.name} onClick={onCityClick(item.name)}>\n                                {item.name}\n                            </ListItem>\n                        );\n                    }\n                )}\n            </List>\n        </>\n\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad: () => dispatch(loadItems())\n});\n\nexport default connect(null, mapDispatchToProps)(Dashboard);\n"],"names":["axios","baseURL","headers","crossDomain","responseType","APIMethods","resource","params","HttpClient","data","LOAD_ITEMS","SET_ITEMS","SET_CITIES_LOADING","setItems","type","payload","setCitiesLoading","status","loadAllCities","citySagaWatcher","call","apiMethods","_links","count","put","list","props","takeLatest","initialState","fetching","state","connect","dispatch","onLoad","id","onFormSave","onPersonDelete","injectReducer","cities","injectSaga","citiesSaga","history","useHistory","useEffect","useSelector","items","LoadingScreen","List","style","width","columnCount","bgcolor","map","item","ListItem","onClick","slug","name","push"],"sourceRoot":""}