{"version":3,"file":"static/js/404.5af94308.chunk.js","mappings":"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","sources":["api/http-client.js","api/apiMethods.js","views/Cities/actions/actionTypes.js","views/Cities/actions/index.js","views/Cities/saga.js","views/Cities/reducer.js","views/Cities/index.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.teleport.org/api'\n\nconst HttpClient = axios.create({\n    baseURL: BASE_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    crossDomain: true,\n    responseType: 'JSON'\n});\n\n\nexport default HttpClient;\n","import HttpClient from './http-client';\n\nclass APIMethods {\n    get(resource, params = {}) {\n        return HttpClient.get(resource, {params});\n    }\n\n    create(resource, {data, ...params} = {}) {\n        return HttpClient.post(resource, data, {params});\n    }\n\n    update(resource, {data, ...params}) {\n        return HttpClient.put(resource, data, {params});\n    }\n\n    delete(resource, params) {\n        return HttpClient.delete(resource, {params});\n    }\n}\n\nexport default new APIMethods();\n","export const LOAD_ITEM = 'LOAD_ITEM_CITY';\nexport const SET_ITEM = 'SET_ITEM_CITY';\nexport const SET_CITIES_LOADING = 'SET_CITIES_LOADING';\nexport const LOAD_SALARY = 'LOAD_SALARY'\nexport const SET_SALARY = 'SET_SALARY'\n","import {LOAD_ITEM, LOAD_SALARY, SET_CITIES_LOADING, SET_ITEM, SET_SALARY} from './actionTypes';\n\nexport const loadItem = id => ({\n    type: LOAD_ITEM,\n    payload: id\n});\n\nexport const setItem = data => ({\n    type: SET_ITEM,\n    payload: data\n});\nexport const loadSalary = (loc, title) => ({\n    type: LOAD_SALARY,\n    payload: {loc, title}\n});\n\nexport const setSalary = data => ({\n    type: SET_SALARY,\n    payload: data\n});\n\nexport const setCityLoading = status => ({\n    type: SET_CITIES_LOADING,\n    payload: status\n});\n","import {call, put, takeLatest} from 'redux-saga/effects';\nimport apiMethods from '../../api/apiMethods';\nimport {LOAD_ITEM, LOAD_SALARY} from './actions/actionTypes';\nimport {setCityLoading, setItem, setSalary} from './actions';\nimport axios from \"axios\";\n\nfunction* loadSalaryHandler(props = {}, {payload: {loc, title}}) {\n    try {\n        const {data: detailsalaries} = yield call(axios.get, `https://eightball.internal.teleport.org/api/salary/slug:${loc.toLowerCase()}/${title}/`);\n        yield put(setSalary({detailsalaries}));\n    } catch (error) {\n\n    } finally {\n        yield put(setCityLoading(false));\n    }\n}\n\nfunction* loadItemHandler(props = {}, {payload: id}) {\n    try {\n        const {data: common} = yield call(apiMethods.get, `urban_areas/slug:${id.toLowerCase()}/`);\n        const {data: images} = yield call(apiMethods.get, `urban_areas/slug:${id.toLowerCase()}/images/`);\n        const {data: salaries} = yield call(apiMethods.get, `urban_areas/slug:${id.toLowerCase()}/salaries/`);\n        const {data: detailsalaries} = yield call(axios.get, `https://eightball.internal.teleport.org/api/salary/slug:${id.toLowerCase()}/SOFTWARE-ENGINEER/`);\n        yield put(setItem({...common, ...images, ...salaries, detailsalaries}));\n    } catch (error) {\n\n    } finally {\n        yield put(setCityLoading(false));\n    }\n}\n\nexport default function* citySagaWatcher(props) {\n\n    yield takeLatest(LOAD_ITEM, loadItemHandler, props);\n    yield takeLatest(LOAD_SALARY, loadSalaryHandler, props);\n}\n","import {LOAD_ITEM, SET_CITIES_LOADING, SET_ITEM, SET_SALARY} from './actions/actionTypes';\n\nconst initialState = {\n    fetching: true,\n    item: {}\n};\n\nexport default (state = initialState, {type, payload}) => {\n    switch (type) {\n        case LOAD_ITEM:\n            return {\n                ...state,\n                fetching: true\n            };\n        case SET_ITEM:\n            return {\n                ...state,\n                fetching: false,\n                item: payload\n            };\n        case SET_SALARY:\n            return {\n                ...state,\n                fetching: false,\n                item: {\n                    ...state.item,\n                    ...payload\n                }\n            };\n        case SET_CITIES_LOADING:\n            return {\n                ...state,\n                fetching: payload\n            };\n        default:\n            return state;\n    }\n};\n","import React, {useEffect} from 'react';\nimport {connect, useSelector} from 'react-redux';\nimport {injectReducer, injectSaga} from 'redux-sagas-injector';\nimport {loadItem, loadSalary} from './actions';\nimport citysSaga from './saga';\nimport city from './reducer';\nimport {useParams} from \"react-router\";\nimport LoadingScreen from \"../../components/loadingManager/LoadingScreen\";\nimport {Box, Grid, List, ListItem} from \"@material-ui/core\";\nimport {\n    CategoryScale,\n    Chart as ChartJS,\n    Legend,\n    LinearScale,\n    LineElement,\n    PointElement,\n    Title,\n    Tooltip,\n} from 'chart.js';\nimport {Line} from 'react-chartjs-2';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nexport const options = {\n    responsive: true,\n    plugins: {\n        legend: {\n            position: 'top',\n        },\n        title: {\n            display: true,\n            text: 'Chart.js Line Chart',\n        },\n    },\n};\n\nconst Cities = ({onLoad, loadSalary}) => {\n    injectReducer('city', city);\n    injectSaga(`citysSaga`, citysSaga);\n    const {citySlug} = useParams();\n    useEffect(() => {\n        onLoad(citySlug);\n    }, [onLoad, citySlug]);\n    const fetching = useSelector(state => state.city.fetching);\n    const item = useSelector(state => state.city.item);\n    const distribution = item?.detailsalaries?.salary?.distribution;\n    const data = {\n        labels: distribution?.map((el) => {\n            return el.salary;\n        }),\n        datasets: [\n            {\n                label: 'Dataset 1',\n                data: distribution?.map((el) => {\n                    return el.yval;\n                }),\n                borderColor: 'rgb(255, 99, 132)',\n                backgroundColor: 'rgba(255, 99, 132, 0.5)',\n            },\n        ],\n    };\n    if (fetching) return <LoadingScreen/>\n    return (<>\n\n            <h1>{item?.full_name}</h1>\n            <img src={item?.photos[0].image.web}/>\n            <Box display=\"flex\" flexGrow={1} mt={2} component={Grid} container direction=\"row\">\n                <Box\n                    display=\"flex\"\n                    pr={2}\n                    xs={6}\n                    component={Grid}\n                    container\n                    item\n                    direction=\"column\"\n                    sx={{width: '100%'}}\n                >\n                    <List\n                        style={{width: '100%', columnCount: 3, bgcolor: 'background.paper'}}>\n                        {item.salaries?.map(\n                            (item) => {\n                                return (\n                                    <ListItem key={item?.job?.title}\n                                              onClick={() => loadSalary(citySlug, item?.job?.id)}>\n                                        {item?.job?.title}\n                                    </ListItem>\n                                );\n                            }\n                        )}\n                    </List>\n                </Box>\n                <Box\n                    display=\"flex\"\n                    pr={2}\n                    xs={6}\n                    component={Grid}\n                    container\n                    item\n                    direction=\"column\"\n                    sx={{width: '100%'}}\n                >\n\n                    <Line options={options} data={data}/>\n                </Box>\n            </Box>\n\n        </>\n\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad: id => dispatch(loadItem(id)),\n    loadSalary: (loc, title) => dispatch(loadSalary(loc, title))\n});\n\nexport default connect(null, mapDispatchToProps)(Cities);\n"],"names":["axios","baseURL","headers","crossDomain","responseType","APIMethods","resource","params","HttpClient","data","LOAD_ITEM","SET_ITEM","SET_CITIES_LOADING","LOAD_SALARY","SET_SALARY","setItem","type","payload","setSalary","setCityLoading","status","loadSalaryHandler","loadItemHandler","citySagaWatcher","loc","title","call","toLowerCase","detailsalaries","put","id","apiMethods","common","images","salaries","props","takeLatest","initialState","fetching","item","state","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","options","responsive","plugins","legend","position","display","text","connect","dispatch","onLoad","loadItem","loadSalary","injectReducer","city","injectSaga","citysSaga","citySlug","useParams","useEffect","useSelector","distribution","salary","labels","map","el","datasets","label","yval","borderColor","backgroundColor","LoadingScreen","full_name","src","photos","image","web","Box","flexGrow","mt","component","Grid","container","direction","pr","xs","sx","width","List","style","columnCount","bgcolor","ListItem","onClick","job"],"sourceRoot":""}